defaultTasks 'clean', 'test', 'aggregate'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: "net.serenity-bdd.serenity-gradle-plugin"

group 'org.automation.web'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
}
tasks.register('generateHtmlReports', Copy) {
    from 'target/site/serenity'
    into 'build/reports/serenity'
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:3.2.5")
        classpath("net.serenity-bdd:serenity-single-page-report:2.1.4")
    }
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: "net.serenity-bdd.serenity-gradle-plugin"

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = "iso-8859-1"
compileTestJava.options.encoding = "iso-8859-1"

serenity {
    reports = ["single-page-html"]
    testRoot = "starter"
    requirementsDir = "src/test/resources/features/example"
}

//"src/test/resources/features"

ext {
    serenityVersion = '3.6.12'
}

ext {
    serenityCoreVersion = '4.1.3'
    junitVersion = '3.4.1'
    assertJVersion = '3.24.2'

}

dependencies {


    implementation "net.serenity-bdd:serenity-core:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-junit:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-cucumber:${serenityCoreVersion}",
            "org.assertj:assertj-core:${assertJVersion}",

    implementation("com.googlecode.json-simple:json-simple:1.1.1")




}

test {

    testLogging.showStandardStreams = true

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    systemProperties System.getProperties()
    systemProperty "cucumber.options", System.getProperty("cucumber.options")
    systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")
}
tasks.withType(Test) {
    include '**/CurrentTestRunner.class'
}

gradle.startParameter.continueOnFailure = true

test.finalizedBy(aggregate)
